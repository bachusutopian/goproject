package main

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"os"
	"sync"
)

func matrix_multiplication(a, b, c [][]int, row, col int, mutex_as_parameter *sync.Mutex) {
	var k int
	for k = 0; k < len(a[0]); k++ {
		mutex_as_parameter.Lock()
		c[row][col] += a[row][k] * b[k][col]
		mutex_as_parameter.Unlock()
	}
}

func handleConnection(connection net.Conn, wg *sync.WaitGroup) {
	defer wg.Done()
	log.Println("Connection accepted ", connection.RemoteAddr())

	// Send welcome message and request matrix dimensions
	connection.Write([]byte("Hello ! Welcome to the Matrix Multiplicator\n"))
	connection.Write([]byte("Please enter the names of the files containing your matrices:\n_"))

	reader := bufio.NewReader(connection)
	line, err := reader.ReadString('\n')
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("read line: %s-\n", line)

	// open file
	f, err := os.Open(line)
	if err != nil {
		log.Fatal(err)
	}
	// remember to close the file at the end of the program
	defer f.Close()

	// read the file line by line using scanner
	scanner := bufio.NewScanner(f)

	for scanner.Scan() {
		// do something with a line
		fmt.Printf("line: %s\n", scanner.Text())
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

}

func main() {
	listener, error_ := net.Listen("tcp", ":9000")
	if error_ != nil {
		panic(error_)
	}
	var wg sync.WaitGroup
	for {
		connection, error_ := listener.Accept()
		if error_ != nil {
			log.Println("Accept Error", error_)
			continue
		}
		wg.Add(1)
		go func() {
			handleConnection(connection, &wg)
		}()
	}
	wg.Wait()
}
